from telegram import Update
from telegram.ext import ContextTypes
from ai.agent import IncidentAIAgent
from services.google_sheets import GoogleSheetsService
from services.telegram import TelegramService
from services.redis_memory import RedisMemory
from services.incident_manager import IncidentManager
from config.settings import settings
from datetime import datetime
from telegram.constants import ChatAction
import asyncio
import re
from services.voice_handler import VoiceHandler
from utils.validators import validate_photo, get_file_extension_from_mime, format_file_size
from telegram import Voice, PhotoSize
from zoneinfo import ZoneInfo
from models.incident import Incident

async def show_typing(context, chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞"""
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    except:
        pass

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
ai_agent = IncidentAIAgent()
sheets_service = GoogleSheetsService()
telegram_service = TelegramService()
memory_service = RedisMemory()
incident_manager = IncidentManager()
voice_handler = VoiceHandler()

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
user_contexts = {}


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await show_typing(context, update.effective_chat.id)
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    memory_service.update_user_info(user_id, {
        "username": username,
        "first_name": update.effective_user.first_name,
        "chat_id": update.effective_chat.id
    })
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_summary = memory_service.get_user_summary(user_id)
    
    if user_summary['incidents_count'] > 0:
        welcome = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {update.effective_user.first_name}!\n\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {user_summary['incidents_count']}\n"
        )
        
        if user_summary['frequent_branches']:
            branches = ", ".join([b[0] for b in user_summary['frequent_branches'][:2]])
            welcome += f"‚Ä¢ –ß–∞—Å—Ç—ã–µ —Ñ–∏–ª–∏–∞–ª—ã: {branches}\n"
    else:
        welcome = f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ Roma Pizza.\n\n"
    
    welcome += (
        "\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ:\n"
        "‚Ä¢ '–°–ª–æ–º–∞–ª–∞—Å—å –∫–∞—Å—Å–∞ –≤ –ù–æ–≤–∑–∞'\n"
        "‚Ä¢ '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –≤ Chilonzor'\n\n"
        "üìä –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: /rep [–∑–∞–ø—Ä–æ—Å]\n"
        "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /mystats"
    )
    
    await update.message.reply_text(welcome)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    memory_service.add_message(user_id, "user", "/start")
    memory_service.add_message(user_id, "assistant", welcome)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–º—è—Ç—å—é"""
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    chat_id = update.effective_chat.id
    await show_typing(context, chat_id)
    
    # –í–ê–ñ–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if str(chat_id) == settings.TELEGRAM_GROUP_CHAT_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if update.effective_chat.type != 'private':
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    author_username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    author_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    author_info = f"@{author_username} ({author_name})"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    memory_service.add_message(user_id, "user", message_text)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é
    user_context = user_contexts.get(str(user_id))
    conversation_history = memory_service.get_context(user_id)
    user_summary = memory_service.get_user_summary(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã (–±–µ–∑ —Ñ–æ—Ç–æ) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    pending_incident = incident_manager.get_pending_incident_for_user_simple(str(user_id))
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: user_id={user_id}, pending_incident={pending_incident is not None}")
    if pending_incident:
        print(f"üîç –ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç: {pending_incident['id']}, has_image={pending_incident.get('has_image', False)}")
    
    print(f"üîç user_context: {user_context}")
    waiting_for_photo = user_context and user_context.get('waiting_for_photo', False)
    print(f"üîç waiting_for_photo: {waiting_for_photo}")
    print(f"üîç –£—Å–ª–æ–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: pending_incident={pending_incident is not None}, waiting_for_photo={waiting_for_photo}")
    
    if pending_incident and not waiting_for_photo:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        user_contexts[str(user_id)] = {
            'waiting_for_photo': True,
            'incident_id': pending_incident['id'],
            'original_message': pending_incident.get('full_message', ''),
            'author_info': author_info
        }
        
        await update.message.reply_text(
            f"üì∏ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç {pending_incident['id']}!\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, "
            f"–∞ –∑–∞—Ç–µ–º –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç."
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    ai_response = ai_agent.process_message(
        message_text, 
        user_context, 
        conversation_history,
        user_summary
    )
    
    response_text = ai_response['response']
    
    if ai_response['type'] == 'incident':
        incident_data = ai_response.get('incident_data', {})
        
        if not all([incident_data.get('branch'), incident_data.get('department')]):
            await update.message.reply_text(response_text)
            memory_service.add_message(user_id, "assistant", response_text)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–µ
        if user_context:
            full_message = f"{user_context['original_message']}. {message_text}"
        else:
            full_message = message_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        full_message_with_author = f"{full_message}\n\n–ê–≤—Ç–æ—Ä: {author_info}"
        
        incident = ai_agent.create_incident_from_data(
            incident_data, 
            full_message_with_author
        )
        
        if incident:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            deadline_info = ai_agent.calculate_smart_deadline(
                incident_data, 
                full_message  # –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            )
            incident.deadline = deadline_info['deadline']
            deadline_reasoning = deadline_info['reasoning']
            incident.responsible_id = incident.get_responsible_id()
            
            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫—É–¥–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Ñ–æ—Ç–æ!
            # –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            incident_dict = incident.dict()
            incident_dict['user_id'] = str(user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            incident_manager.save_incident(incident_dict)
            print(f"üíæ –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis (–æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ç–æ)")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä—É
            deadline_dt = datetime.fromisoformat(incident.deadline)
            deadline_str = deadline_dt.strftime('%d.%m.%Y %H:%M')
            
            # –í—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Google Sheets)
            print("üì∏ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
            
            base_response = (
                f"‚úÖ –û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç!\n\n"
                f"üìã ID: {incident.id}\n"
                f"üìç –§–∏–ª–∏–∞–ª: {incident.branch}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {incident.department}\n"
                f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {incident.priority}\n"
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
                f"üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {deadline_reasoning}\n\n"
                f"üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.\n"
                f"–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º."
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            user_contexts[str(user_id)] = {
                'waiting_for_photo': True,
                'incident_id': incident.id,
                'original_message': full_message_with_author,
                'author_info': author_info
            }
            
            await update.message.reply_text(base_response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            memory_service.add_message(user_id, "assistant", base_response, {
                "type": "incident",
                "incident_id": incident.id,
                "branch": incident.branch,
                "department": incident.department,
                "priority": incident.priority,
                "author": author_info,
                "deadline": incident.deadline,
                "deadline_reasoning": deadline_reasoning
            })
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ—á–∏—â–∞–µ–º - –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ
        else:
            await update.message.reply_text(response_text)
            memory_service.add_message(user_id, "assistant", response_text)
            
    elif ai_response['type'] == 'clarification':
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if not user_context:
            user_contexts[str(user_id)] = {
                'original_message': message_text,
                'partial_analysis': ai_response.get('incident_data', {}),
                'author_info': author_info
            }
        else:
            user_contexts[str(user_id)]['original_message'] += f". {message_text}"
            if ai_response.get('incident_data'):
                user_contexts[str(user_id)]['partial_analysis'].update(ai_response['incident_data'])
        
        await update.message.reply_text(response_text)
        memory_service.add_message(user_id, "assistant", response_text, {"type": "clarification"})
        
    else:  # not_incident
        await update.message.reply_text(response_text)
        memory_service.add_message(user_id, "assistant", response_text)
        
        if str(user_id) in user_contexts:
            del user_contexts[str(user_id)]

async def rep_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /rep —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if update.effective_chat.type != 'private':
        return
    
    await show_typing(context, update.effective_chat.id)
    text = update.message.text
    query = text[4:].strip() if len(text) > 4 else ""
    
    if not query:
        await update.message.reply_text(
            "üìä –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ /rep:\n"
            "‚Ä¢ /rep –≤—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã\n" 
            "‚Ä¢ /rep —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º\n"
            "‚Ä¢ /rep –ø—Ä–æ–±–ª–µ–º—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ /rep –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
        return
    
    msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        incidents = sheets_service.get_all_incidents()
        
        if not incidents:
            await msg.edit_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Redis
        global_stats = memory_service.get_global_stats()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        analysis = ai_agent.analyze_incidents_data(incidents, query, global_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(analysis) > 4000:
            await msg.edit_text(analysis[:4000])
            for i in range(4000, len(analysis), 4000):
                await update.message.reply_text(analysis[i:i+4000])
        else:
            await msg.edit_text(analysis)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        memory_service.add_message(update.effective_user.id, "user", f"/rep {query}")
        memory_service.add_message(update.effective_user.id, "assistant", analysis[:500] + "...")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def mystats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mystats - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if update.effective_chat.type != 'private':
        return
    
    await show_typing(context, update.effective_chat.id)
    user_id = update.effective_user.id
    user_summary = memory_service.get_user_summary(user_id)
    
    if user_summary['incidents_count'] == 0:
        await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.")
        return
    
    stats_message = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    stats_message += f"üìã –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {user_summary['incidents_count']}\n"
    
    if user_summary['last_activity']:
        last_activity = datetime.fromisoformat(user_summary['last_activity'])
        days_ago = (datetime.now() - last_activity).days
        if days_ago == 0:
            stats_message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å–µ–≥–æ–¥–Ω—è\n"
        elif days_ago == 1:
            stats_message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –≤—á–µ—Ä–∞\n"
        else:
            stats_message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n"
    
    if user_summary['frequent_branches']:
        stats_message += f"\n**–ß–∞—Å—Ç—ã–µ —Ñ–∏–ª–∏–∞–ª—ã:**\n"
        for branch, count in user_summary['frequent_branches']:
            stats_message += f"‚Ä¢ {branch}: {count} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤\n"
    
    if user_summary['frequent_departments']:
        stats_message += f"\n**–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:**\n"
        for dept, count in user_summary['frequent_departments']:
            stats_message += f"‚Ä¢ {dept}: {count} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    history = memory_service.get_context(user_id, 20)
    recent_incidents = []
    
    for msg in history:
        if msg.get('metadata', {}).get('type') == 'incident':
            recent_incidents.append(msg['metadata'])
    
    if recent_incidents:
        stats_message += f"\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã:**\n"
        for inc in recent_incidents[-3:]:
            stats_message += f"‚Ä¢ {inc.get('incident_id', 'N/A')} - {inc.get('branch', 'N/A')}\n"
    
    await update.message.reply_text(stats_message, parse_mode='Markdown')

async def globalstats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /globalstats - –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if update.effective_chat.type != 'private':
        return
    
    await show_typing(context, update.effective_chat.id)
    global_stats = memory_service.get_global_stats()
    
    stats_message = "üåç **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Roma Pizza Bot**\n\n"
    stats_message += f"üìä –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {global_stats['total_incidents']}\n"
    stats_message += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (24—á): {global_stats['active_users_24h']}\n"
    
    if global_stats['branch_stats']:
        stats_message += f"\n**–¢–æ–ø —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º:**\n"
        for branch, count in list(global_stats['branch_stats'].items())[:5]:
            percentage = (count / global_stats['total_incidents'] * 100) if global_stats['total_incidents'] > 0 else 0
            stats_message += f"‚Ä¢ {branch}: {count} ({percentage:.1f}%)\n"
    
    if global_stats['department_stats']:
        stats_message += f"\n**–¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤:**\n"
        for dept, count in list(global_stats['department_stats'].items())[:5]:
            percentage = (count / global_stats['total_incidents'] * 100) if global_stats['total_incidents'] > 0 else 0
            stats_message += f"‚Ä¢ {dept}: {count} ({percentage:.1f}%)\n"
    
    await update.message.reply_text(stats_message, parse_mode='Markdown')

async def resolve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /resolve –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
    await show_typing(context, update.effective_chat.id)
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"–ö–æ–º–∞–Ω–¥–∞ /resolve –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    print(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {context.args}")
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /resolve [ID –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è]\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /resolve #20250827234045 –ó–∞–º–µ–Ω–∏–ª –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å, —Å–≤–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
        )
        return
    
    incident_id = context.args[0]
    resolution = ' '.join(context.args[1:])
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "Unknown"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    incident = incident_manager.get_incident(incident_id)
    
    if not incident:
        await update.message.reply_text(f"‚ùå –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    current_status = incident.get('status', 'OPEN')
    if current_status == 'RESOLVED':
        await update.message.reply_text(f"‚ÑπÔ∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} —É–∂–µ —Ä–µ—à–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
    responsible_id = str(incident.get('responsible_id', ''))
    print(f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    if user_id != responsible_id:
        await update.message.reply_text(
            f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ —ç—Ç–æ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç\n"
            f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ID {responsible_id}\n"
            f"–í–∞—à ID: {user_id}"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    incident['resolution'] = resolution
    incident['resolved_by'] = username
    incident['status'] = 'PENDING_PHOTO'  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –∂–¥–µ–º —Ñ–æ—Ç–æ
    incident_manager.save_incident(incident)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è
    user_contexts[str(user_id)] = {
        'waiting_for_solution_photo': True,
        'incident_id': incident_id,
        'resolution': resolution,
        'resolved_by': username
    }
    
    await update.message.reply_text(
        f"‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        f"üìã ID: {incident_id}\n"
        f"‚ú® –†–µ—à–µ–Ω–∏–µ: {resolution}\n\n"
        f"üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞.\n"
        f"–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç."
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
    await show_typing(context, update.effective_chat.id)
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /status [ID –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞]\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /status #20250827234045"
        )
        return
    
    incident_id = context.args[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
    incident = incident_manager.get_incident(incident_id)
    
    if not incident:
        await update.message.reply_text(f"‚ùå –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    status = settings.INCIDENT_STATUSES.get(incident.get('status', 'OPEN'))
    deadline = datetime.fromisoformat(incident['deadline'])
    deadline_str = deadline.strftime('%d.%m.%Y %H:%M')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    now = datetime.now()
    time_left = deadline - now
    
    if time_left.total_seconds() > 0:
        hours = int(time_left.total_seconds() // 3600)
        minutes = int((time_left.total_seconds() % 3600) // 60)
        time_left_str = f"{hours}—á {minutes}–º–∏–Ω"
    else:
        time_left_str = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
    
    status_message = (
        f"üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident_id}\n\n"
        f"üìç –§–∏–ª–∏–∞–ª: {incident['branch']}\n"
        f"üè¢ –û—Ç–¥–µ–ª: {incident['department']}\n"
        f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {incident['short_description']}\n"
        f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {incident['priority']}\n"
        f"üìà –°—Ç–∞—Ç—É—Å: {status}\n"
        f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {time_left_str}\n"
    )
    
    if incident.get('manager_report'):
        status_message += f"\nüí¨ –û—Ç—á–µ—Ç: {incident['manager_report']}"
    
    await update.message.reply_text(status_message)

async def myincidents_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /myincidents - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"""
    await show_typing(context, update.effective_chat.id)
    user_id = str(update.effective_user.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_department = None
    for dept, dept_id in settings.DEPARTMENT_HEADS.items():
        if dept_id == user_id:
            user_department = dept
            break
    
    if not user_department:
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–∏ –∑–∞ –æ–¥–∏–Ω –æ—Ç–¥–µ–ª.\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
    active_incidents_ids = incident_manager.redis.redis_client.smembers('roma_bot:active_incidents')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_incidents = []
    for incident_id in active_incidents_ids:
        incident = incident_manager.get_incident(incident_id)
        if incident and str(incident.get('responsible_id')) == user_id:
            user_incidents.append(incident)
    
    if not user_incidents:
        await update.message.reply_text(
            f"üìä –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤\n"
            f"–û—Ç–¥–µ–ª: {user_department}"
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–µ–¥–ª–∞–π–Ω—É
    priority_order = {'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π': 0, '–í—ã—Å–æ–∫–∏–π': 1, '–°—Ä–µ–¥–Ω–∏–π': 2, '–ù–∏–∑–∫–∏–π': 3}
    user_incidents.sort(key=lambda x: (priority_order.get(x.get('priority', '–ù–∏–∑–∫–∏–π'), 4), x.get('deadline', '')))
    
    message = f"üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã (–û—Ç–¥–µ–ª: {user_department}):\n\n"
    
    for inc in user_incidents:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
        try:
            deadline = datetime.fromisoformat(inc['deadline'])
            deadline_str = deadline.strftime('%d.%m %H:%M')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            time_left = deadline - datetime.now()
            if time_left.total_seconds() > 0:
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)
                if hours > 4:
                    emoji = "üü¢"
                elif hours > 1:
                    emoji = "üü°"
                else:
                    emoji = "üî¥"
                time_str = f"{hours}—á {minutes}–º"
            else:
                emoji = "‚ö´"
                time_str = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω!"
        except:
            emoji = "‚ö™"
            deadline_str = "–ù–µ —É–∫–∞–∑–∞–Ω"
            time_str = "‚Äî"
        
        message += (
            f"{emoji} {inc['id']}\n"
            f"   üìç {inc['branch']} | {inc['short_description'][:30]}...\n"
            f"   ‚ö†Ô∏è {inc['priority']} | ‚è∞ –î–æ: {deadline_str} ({time_str})\n\n"
        )
    
    message += (
        f"\nüìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(user_incidents)}\n"
        f"–î–ª—è —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        f"/resolve [ID] [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è]"
    )
    
    await update.message.reply_text(message)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã
    if str(chat_id) == settings.TELEGRAM_GROUP_CHAT_ID:
        return
    
    if update.effective_chat.type != 'private':
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    await show_typing(context, chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    processing_msg = await update.message.reply_text(
        "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        voice_file = await update.message.voice.get_file()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        voice_data = await voice_file.download_as_bytearray()
        file_name = f"voice_{user_id}_{update.message.message_id}.ogg"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        success, text = await voice_handler.process_voice_message(bytes(voice_data), file_name)
        
        if not success:
            await processing_msg.edit_text(text)
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await processing_msg.edit_text(
            f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<i>{text}</i>",
            parse_mode='HTML'
        )
        
        # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_typing(context, chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        author_username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        author_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        author_info = f"@{author_username} ({author_name})"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        memory_service.add_message(user_id, "user", f"[–ì–æ–ª–æ—Å–æ–≤–æ–µ]: {text}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        user_context = user_contexts.get(user_id)
        conversation_history = memory_service.get_context(user_id)
        user_summary = memory_service.get_user_summary(user_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
        ai_response = ai_agent.process_message(
            text, 
            user_context, 
            conversation_history,
            user_summary
        )
        
        response_text = ai_response['response']
        
        if ai_response['type'] == 'incident':
            incident_data = ai_response.get('incident_data', {})
            
            if not all([incident_data.get('branch'), incident_data.get('department')]):
                await update.message.reply_text(response_text)
                memory_service.add_message(user_id, "assistant", response_text)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
            if user_context:
                full_message = f"{user_context['original_message']}. {text}"
            else:
                full_message = text
            
            full_message_with_author = f"{full_message}\n\n–ê–≤—Ç–æ—Ä: {author_info}"
            
            incident = ai_agent.create_incident_from_data(
                incident_data, 
                full_message_with_author
            )
            
            if incident:
                
                await show_typing(context, chat_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                deadline_info = ai_agent.calculate_smart_deadline(
                    incident_data, 
                    full_message  # –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                )
                incident.deadline = deadline_info['deadline']
                deadline_reasoning = deadline_info['reasoning']
                incident.responsible_id = incident.get_responsible_id()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                sheets_ok = sheets_service.append_incident(incident)
                incident_dict = incident.dict()
                incident_manager.save_incident(incident_dict)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                telegram_ok = await telegram_service.send_to_group(incident.to_telegram_message())
                
                if incident.responsible_id:
                    try:
                        responsible_message = (
                            f"üö® –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç!\n\n"
                            f"{incident.to_telegram_message(include_deadline=True)}\n\n"
                            f"üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞: {deadline_reasoning}\n\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.\n"
                            f"–ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                            f"/resolve {incident.id} [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è]"
                        )
                        await context.bot.send_message(
                            chat_id=incident.responsible_id,
                            text=responsible_message
                        )
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É: {e}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                deadline_dt = datetime.fromisoformat(incident.deadline)
                deadline_str = deadline_dt.strftime('%d.%m.%Y %H:%M')
                
                base_response = (
                    f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                    f"üìã ID: {incident.id}\n"
                    f"üìç –§–∏–ª–∏–∞–ª: {incident.branch}\n"
                    f"üè¢ –û—Ç–¥–µ–ª: {incident.department}\n"
                    f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {incident.priority}\n"
                    f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
                    f"üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {deadline_reasoning}\n"
                    f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —É–≤–µ–¥–æ–º–ª–µ–Ω\n\n"
                    f"–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∑–∞–π–º—É—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã."
                )
                
                await update.message.reply_text(base_response)
                
                memory_service.add_message(user_id, "assistant", base_response, {
                    "type": "incident",
                    "incident_id": incident.id,
                    "branch": incident.branch,
                    "department": incident.department,
                    "priority": incident.priority,
                    "author": author_info,
                    "deadline": incident.deadline,
                    "deadline_reasoning": deadline_reasoning
                })
                
                if str(user_id) in user_contexts:
                    del user_contexts[str(user_id)]
            else:
                await update.message.reply_text(response_text)
                memory_service.add_message(user_id, "assistant", response_text)
                
        elif ai_response['type'] == 'clarification':
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if not user_context:
                user_contexts[str(user_id)] = {
                    'original_message': text,
                    'partial_analysis': ai_response.get('incident_data', {}),
                    'author_info': author_info
                }
            else:
                user_contexts[str(user_id)]['original_message'] += f". {text}"
                if ai_response.get('incident_data'):
                    user_contexts[str(user_id)]['partial_analysis'].update(ai_response['incident_data'])
            
            await update.message.reply_text(response_text)
            memory_service.add_message(user_id, "assistant", response_text, {"type": "clarification"})
            
        else:  # not_incident
            await update.message.reply_text(response_text)
            memory_service.add_message(user_id, "assistant", response_text)
            
            if str(user_id) in user_contexts:
                del user_contexts[str(user_id)]
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await processing_msg.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
    if str(chat_id) == settings.TELEGRAM_GROUP_CHAT_ID:
        return
    
    if update.effective_chat.type != 'private':
        return
    
    await show_typing(context, chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–µ–µ —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    user_context = user_contexts.get(str(user_id))
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: user_id={user_id}, user_context={user_context}")
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: waiting_for_photo={user_context.get('waiting_for_photo') if user_context else None}")
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: waiting_for_solution_photo={user_context.get('waiting_for_solution_photo') if user_context else None}")
    
    if not user_context or (not user_context.get('waiting_for_photo') and not user_context.get('waiting_for_solution_photo')):
        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è - –∏–≥–Ω–æ—Ä–∏—Ä—É—é")
        await update.message.reply_text(
            "üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ —è –Ω–µ –æ–∂–∏–¥–∞–ª –µ–≥–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ."
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ
    if user_context.get('waiting_for_solution_photo'):
        print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –†–ï–®–ï–ù–ò–Ø –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {user_context['incident_id']}")
        await handle_solution_photo(update, context, user_context, str(user_id))
        return
    else:
        print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –ü–†–û–ë–õ–ï–ú–´ –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {user_context['incident_id']}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = photo.file_id
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        print("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ –∏–∑ Telegram...")
        file = await context.bot.get_file(file_id)
        file_data = await file.download_as_bytearray()
        file_size = len(file_data)
        print(f"‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ: {format_file_size(file_size)}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        # Telegram –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –≤ JPEG, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        file_extension = 'jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é JPEG
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if file_data.startswith(b'\xff\xd8\xff'):
            file_extension = 'jpg'
        elif file_data.startswith(b'\x89PNG'):
            file_extension = 'png'
        elif file_data.startswith(b'GIF'):
            file_extension = 'gif'
        elif file_data.startswith(b'RIFF') and b'WEBP' in file_data[:12]:
            file_extension = 'webp'
            
        print(f"üì∏ –§–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ: {file_extension}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
        print("üîç –í–∞–ª–∏–¥–∏—Ä—É—é —Ñ–æ—Ç–æ...")
        is_valid, error_msg = validate_photo(file_extension, file_size)
        
        if not is_valid:
            print(f"‚ùå –§–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {error_msg}")
            await update.message.reply_text(f"‚ùå {error_msg}")
            return
        
        print("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∏–∑ Redis
        incident = incident_manager.get_incident(user_context['incident_id'])
        if not incident:
            print(f"‚ùå –ò–Ω—Ü–∏–¥–µ–Ω—Ç {user_context['incident_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis")
            await update.message.reply_text("‚ùå –ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç.")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ Google Sheets
        print("üìä –î–æ–±–∞–≤–ª—è—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ Google Sheets...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º responsible_id –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if incident.get('responsible_id') and isinstance(incident['responsible_id'], int):
            incident['responsible_id'] = str(incident['responsible_id'])
        
        incident_obj = Incident(**incident)
        sheets_ok = sheets_service.append_incident(incident_obj)
        if not sheets_ok:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Sheets")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        print("‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets")
        
        # –¢–µ–ø–µ—Ä—å –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Google Sheets
        try:
            problem_description = incident.get('short_description', '')
            
            success, result = sheets_service.insert_image(
                bytes(file_data), 
                user_context['incident_id'], 
                problem_description,
                file_extension
            )
            
            if not success:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ Sheets: {result}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {result}")
                return
            
            print(f"‚úÖ –§–æ—Ç–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ Google Sheets: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç —Å —Ñ–æ—Ç–æ –≤ Redis
        incident_id = user_context['incident_id']
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} —Å —Ñ–æ—Ç–æ...")
        
        incident['photo_file_id'] = file_id
        incident['has_image'] = True
        incident_manager.save_incident(incident)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets (—Å –æ—Ç–º–µ—Ç–∫–æ–π –æ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        print("üìä –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ Google Sheets...")
        incident_obj = Incident(**incident)
        sheets_ok = sheets_service.update_incident_with_image(incident)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ...")
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
            file = await context.bot.get_file(file_id)
            photo_data = await file.download_as_bytearray()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await context.bot.send_photo(
                chat_id=settings.TELEGRAM_GROUP_CHAT_ID,
                photo=bytes(photo_data),
                caption=incident_obj.to_telegram_message()
            )
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await telegram_service.send_to_group(incident_obj.to_telegram_message())
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å —Ñ–æ—Ç–æ
        if incident.get('responsible_id'):
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É {incident['responsible_id']} —Å —Ñ–æ—Ç–æ...")
            try:
                responsible_message = (
                    f"üö® –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç!\n\n"
                    f"{incident_obj.to_telegram_message(include_deadline=True)}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.\n"
                    f"–ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                    f"/resolve {incident['id']} [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è]"
                )
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É
                file = await context.bot.get_file(file_id)
                photo_data = await file.download_as_bytearray()
                
                await context.bot.send_photo(
                    chat_id=incident['responsible_id'],
                    photo=bytes(photo_data),
                    caption=responsible_message
                )
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É: {e}")
                # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                try:
                    await context.bot.send_message(
                        chat_id=incident['responsible_id'],
                        text=responsible_message
                    )
                    print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")
                except Exception as e2:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –¥–∞–∂–µ —Ç–µ–∫—Å—Ç: {e2}")
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!\n\n"
            "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É –≤ Google Sheets –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.\n"
            "–û–Ω–∏ –∑–∞–π–º—É—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã."
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        print("üßπ –û—á–∏—â–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if str(user_id) in user_contexts:
            del user_contexts[str(user_id)]
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_solution_photo(update: Update, context: ContextTypes.DEFAULT_TYPE, user_context: dict, user_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = photo.file_id
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        print("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –∏–∑ Telegram...")
        file = await context.bot.get_file(file_id)
        file_data = await file.download_as_bytearray()
        file_size = len(file_data)
        print(f"‚úÖ –§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω–æ: {format_file_size(file_size)}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = 'jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é JPEG
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if file_data.startswith(b'\xff\xd8\xff'):
            file_extension = 'jpg'
        elif file_data.startswith(b'\x89PNG'):
            file_extension = 'png'
        elif file_data.startswith(b'GIF'):
            file_extension = 'gif'
        elif file_data.startswith(b'RIFF') and b'WEBP' in file_data[:12]:
            file_extension = 'webp'
            
        print(f"üì∏ –§–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è: {file_extension}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
        print("üîç –í–∞–ª–∏–¥–∏—Ä—É—é —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è...")
        is_valid, error_msg = validate_photo(file_extension, file_size)
        
        if not is_valid:
            print(f"‚ùå –§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {error_msg}")
            await update.message.reply_text(f"‚ùå {error_msg}")
            return
        
        print("‚úÖ –§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∏–∑ Redis
        incident = incident_manager.get_incident(user_context['incident_id'])
        if not incident:
            print(f"‚ùå –ò–Ω—Ü–∏–¥–µ–Ω—Ç {user_context['incident_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis")
            await update.message.reply_text("‚ùå –ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è...")
        success, result = sheets_service.insert_solution_image(
            bytes(file_data), 
            user_context['incident_id'], 
            user_context['resolution'],
            file_extension
        )
        
        if not success:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è: {result}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è: {result}")
            return
        
        print(f"‚úÖ –§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        incident['solution_photo_file_id'] = file_id
        incident['has_solution_image'] = True
        incident['status'] = 'RESOLVED'  # –¢–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        incident_manager.save_incident(incident)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
        print("üìä –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ Google Sheets...")
        incident_obj = Incident(**incident)
        sheets_ok = sheets_service.update_incident_with_image(incident)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è...")
        try:
            completion_message = (
                f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident['id']} —Ä–µ—à–µ–Ω!\n\n"
                f"üìç –§–∏–ª–∏–∞–ª: {incident.get('branch', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {incident.get('department', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {incident.get('short_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"‚ú® –†–µ—à–µ–Ω–∏–µ: {user_context['resolution']}\n"
                f"üë§ –†–µ—à–∏–ª: @{user_context['resolved_by']}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await context.bot.send_photo(
                chat_id=settings.TELEGRAM_GROUP_CHAT_ID,
                photo=bytes(file_data),
                caption=completion_message
            )
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await telegram_service.send_to_group(completion_message)
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è!\n\n"
            "üì∏ –§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.\n"
            "–ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!"
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        print("üßπ –û—á–∏—â–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if str(user_id) in user_contexts:
            del user_contexts[str(user_id)]
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        try:
            response = ai_agent.process_message("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", None)
            await update.effective_message.reply_text(
                response.get('response', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            )
        except:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )