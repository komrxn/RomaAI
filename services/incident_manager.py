import asyncio
from datetime import datetime, timedelta
from typing import Optional, List, Dict
import json
from config.settings import settings
from services.redis_memory import RedisMemory
from services.google_sheets import GoogleSheetsService
from services.telegram import TelegramService
from telegram import Bot

class IncidentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.redis = RedisMemory()
        self.sheets = GoogleSheetsService()
        self.telegram = TelegramService()
        self.bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        
    def _get_incident_key(self, incident_id: str) -> str:
        """–ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ Redis"""
        return f"roma_bot:incident:{incident_id}"
    
    def _get_deadline_key(self, deadline: str) -> str:
        """–ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
        return f"roma_bot:deadlines:{deadline}"
    
    def save_incident(self, incident: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ Redis"""
        try:
            incident_key = self._get_incident_key(incident['id'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            incident['created_at'] = datetime.now().isoformat()
            incident['deadline'] = self._calculate_deadline(incident['priority'])
            incident['responsible_id'] = settings.DEPARTMENT_HEADS.get(incident['department'])
            incident['status'] = 'OPEN'
            incident['reminders_sent'] = '[]'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            self.redis.redis_client.hset(
                incident_key,
                mapping={k: json.dumps(v) if isinstance(v, (dict, list)) else str(v) 
                        for k, v in incident.items()}
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –Ω–∞ 30 –¥–Ω–µ–π
            self.redis.redis_client.expire(incident_key, 30 * 24 * 60 * 60)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
            self.redis.redis_client.sadd('roma_bot:active_incidents', incident['id'])
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
            return False
    
    def _calculate_deadline(self, priority: str) -> str:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω"""
        from zoneinfo import ZoneInfo
        hours = settings.DEADLINES.get(priority, 24)
        tashkent_time = datetime.now(ZoneInfo('Asia/Tashkent'))
        deadline = tashkent_time + timedelta(hours=hours)
        return deadline.isoformat()
    
    def get_incident(self, incident_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∏–∑ Redis"""
        try:
            incident_key = self._get_incident_key(incident_id)
            data = self.redis.redis_client.hgetall(incident_key)
            
            if not data:
                return None
            
            # –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
            incident = {}
            for k, v in data.items():
                try:
                    incident[k] = json.loads(v)
                except:
                    incident[k] = v
                    
            return incident
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
            return None
    
    def update_incident_status(self, incident_id: str, status: str, 
                            manager_report: Optional[str] = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
        try:
            incident_key = self._get_incident_key(incident_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            if not self.redis.redis_client.exists(incident_key):
                print(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.redis.redis_client.hset(incident_key, 'status', status)
            
            if status == 'RESOLVED':
                self.redis.redis_client.hset(incident_key, 'resolved_at', 
                                        datetime.now().isoformat())
                # –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
                self.redis.redis_client.srem('roma_bot:active_incidents', incident_id)
                print(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                
            elif status == 'OVERDUE':
                # –ü—Ä–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è
                print(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π")
                
            if manager_report:
                self.redis.redis_client.hset(incident_key, 'manager_report', manager_report)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
            self._update_sheet_status(incident_id, status, manager_report)
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def _update_sheet_status(self, incident_id: str, status: str, 
                           manager_report: Optional[str] = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ Google Sheets"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            incidents = self.sheets.get_all_incidents()
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –ø–æ ID
            for i, incident_row in enumerate(incidents):
                if incident_row[0] == incident_id:
                    row_number = i + 2  # +2 —Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1 –∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–∫–æ–ª–æ–Ω–∫–∞ J)
                    range_status = f"{settings.SHEET_NAME}!J{row_number}"
                    self.sheets.service.spreadsheets().values().update(
                        spreadsheetId=self.sheets.spreadsheet_id,
                        range=range_status,
                        valueInputOption='USER_ENTERED',
                        body={'values': [[settings.INCIDENT_STATUSES[status]]]}
                    ).execute()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å (–∫–æ–ª–æ–Ω–∫–∞ I)
                    if manager_report:
                        range_report = f"{settings.SHEET_NAME}!I{row_number}"
                        self.sheets.service.spreadsheets().values().update(
                            spreadsheetId=self.sheets.spreadsheet_id,
                            range=range_report,
                            valueInputOption='USER_ENTERED',
                            body={'values': [[manager_report]]}
                        ).execute()
                    
                    break
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Sheets: {e}")
    
    async def send_reminder(self, incident_id: str, minutes_before: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É"""
        try:
            incident = self.get_incident(incident_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ —Ä–µ—à–µ–Ω
            if not incident or incident.get('status') != 'OPEN':
                return
            
            responsible_id = incident.get('responsible_id')
            if not responsible_id:
                return
            
            deadline = datetime.fromisoformat(incident['deadline'])
            deadline_str = deadline.strftime('%d.%m.%Y %H:%M')
            
            message = (
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ!\n\n"
                f"ID: {incident['id']}\n"
                f"üìç –§–∏–ª–∏–∞–ª: {incident['branch']}\n"
                f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {incident['priority']}\n"
                f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {incident['short_description']}\n"
                f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {minutes_before} –º–∏–Ω—É—Ç\n"
                f"üèÅ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n"
                f"/resolve {incident['id']} [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è]"
            )
            
            await self.bot.send_message(chat_id=responsible_id, text=message)
            
            # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å JSON
            reminders_str = incident.get('reminders_sent', '[]')
            if isinstance(reminders_str, str):
                reminders = json.loads(reminders_str)
            else:
                reminders = reminders_str if isinstance(reminders_str, list) else []
                
            reminders.append(minutes_before)
            
            self.redis.redis_client.hset(
                self._get_incident_key(incident_id),
                'reminders_sent',
                json.dumps(reminders)
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {incident_id}: {e}")

    async def check_deadlines(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
                active_incidents = self.redis.redis_client.smembers('roma_bot:active_incidents')
                
                for incident_id in active_incidents:
                    incident = self.get_incident(incident_id)
                    if not incident:
                        continue
                    
                    # –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—à–µ–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
                    if incident.get('status') == 'RESOLVED':
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ—Å–ª–∏ –µ—â–µ —Ç–∞–º
                        self.redis.redis_client.srem('roma_bot:active_incidents', incident_id)
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
                    if incident.get('status') == 'OPEN':
                        try:
                            deadline = datetime.fromisoformat(incident['deadline'])
                            now = datetime.now()
                            time_left = deadline - now
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
                            if time_left.total_seconds() <= 0:
                                self.update_incident_status(incident_id, 'OVERDUE')
                                await self._send_overdue_notification(incident)
                                continue
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            minutes_left = time_left.total_seconds() / 60
                            reminders_sent = incident.get('reminders_sent', [])
                            
                            for reminder_time in settings.REMINDER_INTERVALS:
                                if (minutes_left <= reminder_time and 
                                    reminder_time not in reminders_sent):
                                    await self.send_reminder(incident_id, reminder_time)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è {incident_id}: {e}")
                            continue
                
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
                await asyncio.sleep(60)
                    
    async def _send_overdue_notification(self, incident: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ"""
        responsible_id = incident.get('responsible_id')
        if not responsible_id:
            return
        
        message = (
            f"üö® –ò–ù–¶–ò–î–ï–ù–¢ –ü–†–û–°–†–û–ß–ï–ù!\n\n"
            f"ID: {incident['id']}\n"
            f"üìç –§–∏–ª–∏–∞–ª: {incident['branch']}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {incident['department']}\n"
            f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {incident['priority']}\n"
            f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {incident['short_description']}\n\n"
            f"–°—Ä–æ—á–Ω–æ —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç!"
        )
        
        await self.bot.send_message(chat_id=responsible_id, text=message)