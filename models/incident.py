from datetime import datetime, timedelta
from typing import Optional
from pydantic import BaseModel, Field
from config.settings import settings
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

class Incident(BaseModel):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    
    id: str = Field(description="ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ #YYYY-MMDDhhmmss")
    date: str = Field(description="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
    time: str = Field(description="–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm")
    branch: str = Field(description="–§–∏–ª–∏–∞–ª")
    department: str = Field(description="–û—Ç–¥–µ–ª")
    short_description: str = Field(description="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    priority: str = Field(description="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π/–í—ã—Å–æ–∫–∏–π/–°—Ä–µ–¥–Ω–∏–π/–ù–∏–∑–∫–∏–π")
    full_message: str = Field(description="–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ—Ä–æ–º")
    manager_report: Optional[str] = Field(default="", description="–û—Ç—á–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    status: str = Field(default="OPEN", description="–°—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    deadline: Optional[str] = Field(default=None, description="–î–µ–¥–ª–∞–π–Ω —Ä–µ—à–µ–Ω–∏—è")
    responsible_id: Optional[str] = Field(default=None, description="Telegram ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")
    completed_at: Optional[str] = Field(default=None, description="–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    
    @classmethod
    def create_id(cls) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ ID"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ Redis –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        from services.redis_memory import RedisMemory
        redis = RedisMemory()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        today = datetime.now().strftime('%Y%m%d')
        
        # –ö–ª—é—á —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ –¥–µ–Ω—å
        counter_key = f"roma_bot:incident_counter:{today}"
        
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
        count = redis.redis_client.incr(counter_key)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –Ω–∞ 2 –¥–Ω—è
        redis.redis_client.expire(counter_key, 2 * 24 * 60 * 60)
        
        # –§–æ—Ä–º–∞—Ç: #YYYYMMDD-NNN (–Ω–∞–ø—Ä–∏–º–µ—Ä: #20250829-001)
        return f"#{today}-{count:03d}"

    @classmethod
    def get_current_date(cls) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É"""
        tashkent_time = datetime.now(ZoneInfo('Asia/Tashkent'))
        return tashkent_time.strftime('%Y-%m-%d')

    @classmethod
    def get_current_time(cls) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É"""
        tashkent_time = datetime.now(ZoneInfo('Asia/Tashkent'))
        return tashkent_time.strftime('%H:%M')

    def calculate_deadline(self) -> str:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¢–∞—à–∫–µ–Ω—Ç–∞"""
        hours = settings.DEADLINES.get(self.priority, 24)
        tashkent_time = datetime.now(ZoneInfo('Asia/Tashkent'))
        deadline_time = tashkent_time + timedelta(hours=hours)
        return deadline_time.isoformat()
        
    def get_responsible_id(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ –æ—Ç–¥–µ–ª—É"""
        return settings.DEPARTMENT_HEADS.get(self.department)
    
    def to_sheet_row(self) -> list:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Google Sheets"""
        # –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (J)
        return [
            self.id,                           # A
            self.date,                         # B
            self.time,                         # C
            self.branch,                       # D
            self.department,                   # E
            self.short_description,            # F
            self.priority,                     # G
            self.full_message,                 # H
            self.manager_report,               # I
            settings.INCIDENT_STATUSES[self.status]  # J - –°—Ç–∞—Ç—É—Å
        ]
    
    def to_telegram_message(self, include_deadline: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∞
        main_message = self.full_message.split('\n\n–ê–≤—Ç–æ—Ä:')[0] if '\n\n–ê–≤—Ç–æ—Ä:' in self.full_message else self.full_message
        
        message = (
            f"üö® –ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç Roma Pizza\n"
            f"ID: {self.id}\n"
            f"üìÖ {self.date} {self.time}\n"
            f"üìç –§–∏–ª–∏–∞–ª: {self.branch}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {self.department}\n"
            f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {self.priority}\n"
            f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {self.short_description}\n"
        )
        
        if include_deadline and self.deadline:
            deadline_dt = datetime.fromisoformat(self.deadline)
            deadline_str = deadline_dt.strftime('%d.%m.%Y %H:%M')
            message += f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        
        message += f"‚Äî\n{main_message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if '\n\n–ê–≤—Ç–æ—Ä:' in self.full_message:
            author = self.full_message.split('\n\n–ê–≤—Ç–æ—Ä:')[1].strip()
            message += f"\n\n‚Äî {author}"
        
        return message